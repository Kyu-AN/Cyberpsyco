import requests
import base64
from ai_helper import generate_parameters,generate_query
from APIkey import SPOTIFY_API_KEY, SPOTIFY_API_SECRET

def get_access_token():
    headers = {
        "Authorization": f"Basic {base64.b64encode(f'{SPOTIFY_API_KEY}:{SPOTIFY_API_SECRET}'.encode()).decode()}"   
    }
    data = {
        "grant_type": "client_credentials"
    }

    response = requests.post("https://accounts.spotify.com/api/token", headers=headers, data=data)
    result = response.json()
    return result["access_token"]



def search_spotify_by_ai(valence,energy,danceability,acousticness,token):

    headers = {
        "Authorization": f"Bearer {token}"
    }
    params = {
        "seed_genres": "pop",  
        "target_valence": valence,
        "target_energy": energy,
        "target_dancebility": danceability,
        "target_acousticness": acousticness,
        "limit": 5
    }

    response = requests.get("https://api.spotify.com/v1/recommendations", headers=headers, params=params)
    if response.status_code != 200:
        print("Spotify 추천 API 실패:", response.status_code)
        return []

    return [f"{track['name']} - {track['artists'][0]['name']}" for track in response.json().get("tracks", [])]


def search_spotify_by_query(query, token):

    headers = {
        "Authorization": f"Bearer {token}"
    }
    params = {
        "q": query,
        "type": "track",
        "limit": 5
    }

    response = requests.get("https://api.spotify.com/v1/search", headers=headers, params=params)
    if response.status_code != 200:
        print("Spotify 검색 API 실패:", response.status_code)
        return []

    return [f"{track['name']} - {track['artists'][0]['name']}" for track in response.json().get("tracks", {}).get("items", [])]
